~/_notesPlus/tierAuthNZ.utf
_____________________
h6. 2018-09-27 13:34  OIDFoundation: R&E WG

https://github.com/daserzw/oidc-edu-wg/blob/v1.0.0/charter.md  <== Research and Education WG charter

From: oidc-deploy-request@incommon.org <oidc-deploy-request@incommon.org> on behalf of Davide Vaghetti <davide.vaghetti@garr.it>
Sent: Thursday, September 27, 2018 11:21 AM
To: oidc-deploy@incommon.org
Subject: OIDC Research and Education Working Group proposal approved by the OIDF

Dear All,

as you probably already know, a group of people in the R&E community
some months ago started working on a charter proposal to set up an R&E
working group inside the OpenID Foundation. Please have a look to the
proposal yourself, here:

https://github.com/daserzw/oidc-edu-wg/blob/v1.0.0/charter.md

The proposal has been approved just today. Now, the real work
starts.

So, if you want to be part of it in this very initial phase, please fill
up the following doodle for a post-wg-approval call:

https://doodle.com/poll/dikqg64vf68a6bz2

The agenda of the call is very brief:

* initial working group call: where and when.
* overview at the OpenID Workshop [1]: who and what.

Thanks,
Davide

[1]
https://openid.net/2018/09/07/registration-open-for-openid-foundation-workshop-at-vmware-on-monday-october-22-2018/

--
Davide Vaghetti
Consortium GARR
Tel: +390502213158
Mobile: +393357779542
Skype: daserzw

_____________________
h6. 2018-03-30  14:37  Spring Security 5 and OIDC: Working Implementation with Okta as OP

https://www.javacodegeeks.com/2018/03/build-authentication-easy-way-spring-security-5-0-oidc.html

https://dev-335511.oktapreview.com/
https://dev-335511-admin.oktapreview.com/admin/apps/active

{
  "issuer": "https:\/\/dev-335511.oktapreview.com\/oauth2\/default",
  "authorization_endpoint": "https:\/\/dev-335511.oktapreview.com\/oauth2\/default\/v1\/authorize",
  "token_endpoint": "https:\/\/dev-335511.oktapreview.com\/oauth2\/default\/v1\/token",
  "registration_endpoint": "https:\/\/dev-335511.oktapreview.com\/oauth2\/v1\/clients",
  "jwks_uri": "https:\/\/dev-335511.oktapreview.com\/oauth2\/default\/v1\/keys",
  "response_types_supported": [
    "code",
    "token",
    "code token"
  ],
  "response_modes_supported": [
    "query",
    "fragment",
    "form_post",
    "okta_post_message"
  ],
  "grant_types_supported": [
    "authorization_code",
    "implicit",
    "refresh_token",
    "password",
    "client_credentials"
  ],
  "subject_types_supported": [
    "public"
  ],
  "scopes_supported": [
    "openid",
    "profile",
    "email",
    "address",
    "phone",
    "offline_access"
  ],
  "token_endpoint_auth_methods_supported": [
    "client_secret_basic",
    "client_secret_post",
    "client_secret_jwt",
    "none"
  ],
  "claims_supported": [
    "ver",
    "jti",
    "iss",
    "aud",
    "iat",
    "exp",
    "cid",
    "uid",
    "scp",
    "sub"
  ],
  "code_challenge_methods_supported": [
    "S256"
  ],
  "introspection_endpoint": "https:\/\/dev-335511.oktapreview.com\/oauth2\/default\/v1\/introspect",
  "introspection_endpoint_auth_methods_supported": [
    "client_secret_basic",
    "client_secret_post",
    "client_secret_jwt",
    "none"
  ],
  "revocation_endpoint": "https:\/\/dev-335511.oktapreview.com\/oauth2\/default\/v1\/revoke",
  "revocation_endpoint_auth_methods_supported": [
    "client_secret_basic",
    "client_secret_post",
    "client_secret_jwt",
    "none"
  ],
  "end_session_endpoint": "https:\/\/dev-335511.oktapreview.com\/oauth2\/default\/v1\/logout",
  "request_parameter_supported": true,
  "request_object_signing_alg_values_supported": [
    "HS256",
    "HS384",
    "HS512"
  ]
}

_____________________
h6. 2017-07-21 11:22  Chat w Marlena re API AuthNZ

From: Marlena Erdos <marlena.erdos@gmail.com>
Date: Monday, April 17, 2017 at 16:35
To: Keith Hazelton <keith.hazelton@wisc.edu>
Subject: Issues in Jim Fox's model

Hi Keith,

Here is a set of issues in Jim's proposal.  Before I get to those, I'll restate that I believe a "good path" would be to restart this process and consider "cross-domain authentication with pushed attributes" as the problem to be solved.

I have other thoughts on how to proceed. It won't surprise you that the core is looking at existing systems and seeing where the gaps are for the problems TIER-API wishes to solve. We can discuss this if you wind up agreeing that a restart is a good idea. (I won't clog up an already long email with that material now.... Not that there's that much more to say! )

Issues/

Issue #1:  We've already talked about this one, i.e the central registry is just metadata, no more.   It's definitely not a source for "trusted identity" (which is phrase that only makes sense with a context "e.g. "trusted identity in restorative dentistry," in any case).

Issue #2a:  It's not enough to do authentication -- attributes of the user or service being authenticated are vital.   If someone says, "attributes aren't relevant for services," I respectfully disagree.  Consider a "student-managed" service trying to access Grouper. It might have very different rights than an "IT-managed" service.

I'll note that two prominent cross-domain "authentication" systems that started just with authentication  (and pulled attributes or no discussion of attributes) switched to pushed attributes. These are SAML and Microsoft's use of Kerberos.

Pushed attributes in the authN assertion or token is what I believe TIER-API must consider, not authentication alone.

Issue #2b: If you buy my statement, that the authentication assertion/token/ticket must also include attributes/scopes/claims, then Jim's model fails (IMO) -- and it cannot be fixed.

If we extend Jim's model, here's what we get.

A service at institution Aa -- "Client@Aa.edu" -- wants to access a service at institution Bb -- "Service@Bb.edu."

Client@Aa.edu asks its CSR for a token to use for  Service@Bb.edu.

CSR@aa.edu authenticates the Client (details elided) and also pulls in attributes about the Client. Let's say one of the attributes is "IT-managed."

It creates a "token request" message for the CSR@Bb.edu with the identity and attributes included -- Client@Aa.edu and "IT-managed" etc -- and sends it on.

The CSR@bb.edu -- after authenticating the request as being from the CSR@aa.edu -- takes the identity and attributes and creates a signed token whose audience is "Service@Bb.edu."  This token includes the Client's identity and attributes.

So now the CSR at Bb.edu is claiming "IT-managed" -- but it can't in fact legitimately "assert" this.

It can only assert "The CSR@Aa.edu says that Client@Aa.edu is 'IT-managed."

Butler Lampson, Martin Abadi et al have written extensively about this.  What they've written is not easy going and I'm not asking you to spend time reading the single paper I'm going to reference (out of a lot of writing they have done on this topic).  I'm just providing backup for what I'm asserting (so to speak):  http://homepages.inf.ed.ac.uk/gdp/publications/Calculus_for_Access_Control.pdf


There's no commercial authorization system I know of that can express this "says that" relationship.  And direct assertion is actually a lie.

Issue 2c: Let's look at what would result if we had done what Jim suggests in SAML:

In this counter-factual model, the user ask their IdP to send a message to the relying party's IdP asking it  to create an signed assertion for the user.  The subject's IdP passes along the user's identity and attributes.  The target IdP would take what's been passed in and signs it -- and returns the signed assertion to the subject IdP.  And then the subject IdP would send this to the relying party in a redirect..  So, now the RP would have an assertion -- signed by its own IdP -- for the user's identity and attributes at the other institution.

I'll note that the RP still has to do signature validation.   The only "win" is that it doesn't have to keep a list of certs for IdPs that it trusts to create assertions.

And the RP still has to decide on the legitimacy of what's been asserted. Direct assertion of an attribute by the RP's own institutional IdP adds in "trust" that should not be there.   It's taking away the RP's ability to make an informed authorization decision (IMO).

--
One more thought:  Even if you think this matter of who is authoritative to make assertions could be finessed, or doesn't matter,  it's still "more efficient" and "better" (IMO) to look at existing cross-domain authN systems that have undergone a lot of scrutiny already, and see where there are gaps for TIER's needs rather than tweaking Jim's proposal on and on.

If this has been done already, I apologize.  I did not see this in any of the notes or URLs referenced.

Thanks,
Marlena

----------
On Thu, Apr 6, 2017 at 2:47 PM, Jim Fox <fox@washington.edu<mailto:fox@washington.edu>> wrote:

The scenario involves a collaboration between UDub and Old Dominion.

Some defintions:

CSR:  Client/Service Registry
UW:   University of Washington
ODU:  Old Dominion University
CSR.washington.edu<http://CSR.washington.edu>:  Host address of UW's CSR
CSR.odu.edu<http://CSR.odu.edu>:  Host address of ODU's CSR

The problem: Students at UW and ODU are working on a project.
As part of their collaboration an application at ODU needs access to groups maintained by a student (uwuser) at UW.
The application is a registered client with the CSR at ODU and has an id of 'c_ourapp@odu.edu<mailto:c_ourapp@odu.edu>'.
The group service is a registered service at UW's CSR with an id of 's_gws@washington.edu<mailto:s_gws@washington.edu>'.

The solution:

Assume a central registry of CSRs maintained by InCommon.

1) 'uwuser' adds 'c_ourapp@odu.edu<mailto:c_ourapp@odu.edu>' as a member manager (update privilege) of the groups she wishes to share.

2) When the app needs to works with her groups it asks CSR.odu.edu<http://CSR.odu.edu> for an authn token to the group service.

   ( App POSTs to: https://CSR.odu.edu/Token?service=s_gws@washington.edu&type=basic )

3) ODU's CSR finds UW's CSR through the InCommon registry, and asks for the token.

   ( CSR at odu POSTs to: https://CSR.washington.edu/Token?service=s_gws@washington.edu&type=basic&client=c_ourapp@odu.edu )

   The CSRs are web servers and can mutually authenticate with InCommon certificates.

4) UW's CSR responds with token for c_ourapp@odu.edu<mailto:c_ourapp@odu.edu> to access s_gws@washington.edu<mailto:s_gws@washington.edu>.

   ( {"token":"(some token)", "expires":"(some time)", "for":"c_ourapp@odu.edu<mailto:c_ourapp@odu.edu>", ... } )

5) ODU's CSR responds to the app's original request with the same response.

   ( {"token":"(some token)", "expires":"(some time)", "for":"c_ourapp@odu.edu<mailto:c_ourapp@odu.edu>", ... } )

6) The app manages uwuser's group memberships through the group service's REST API, using the token as Basic authn.

   Since the token was issued by UW's CSR it is easy for the group service to authenticate it.

That's it.

Jim
_____________________
h6. 2017-05-11 10:45

ChrisHubing on packaging; new features in Shib 3.4 being backported to 3.3: configuration via metadata; Moz, Google: advice on sec algorithms;

Sean Dilda, Duke: Designated API security commissar.
_____________________
h6. 2017-04-27 13:09  general approach
----------
To better translate what I was asking...in Java the likely way to represent an arbitrarily complex "invoker's security context" is a Java Subject, because it's a giant bag of stuff you can always define later, but now you know what parameter type to use.

I assume that other development languages have some kind of abstraction (.NET does, but I don't know about other frameworks), but my point was that standardizing around an abstraction like that guarantees a degree of flexibility in the API implementation layer that simply punting to REMOTE_USER isn't going to buy you (short of pickling up some complex representation in REMOTE_USER).

-- Scott
----------
After today's TIER API security discussion, getting beyond the base-level need that Bert defined:

Access to Resources by Client for Action

For finer-grained access, I think we need to try to define a predicate format that can be read and interpreted by a rules engine (possibly just unpacking the predicated and doing Grouper role calls).  Then, the TIER components can all implement a passthrough for predicate-based access control to $WhateverTheRulesEngineIs.

Nick
_____________________
h6. 2017-04-05 12:30 Jim's API AuthN approach and client / server registry

Looking for a solution to the problem of authenticating API clients to API services
- Want a solution applicable to TIER-developed HTTP-based APIs, recommend its adoption by TIER API developers

- Client/Service Registry and Token Service
  - The registry is a means by which API clients and services can know and identify one another---through a chain of trust architecture
    - OAuth mechanisms rely on dynamic registration (pairwise between clients and services)
  - Initial aim is to serve institutional client and service communication, but with an eye to federated use cases in the future
  - Can support the OAuth2 use case of clients authenticating to Authorization Servers
  - Can also support a model similar to that used by CILogon: issuance of short-lived certificates for API access,
    - trust rooted in the Cient/Service Registry, a trusted repository of endpoint data (much as signed SAML metadata as a trust anchor).
  - Demo version available
    - try curl -o - -X GET -H "Accept: application/json" -u nobody:asdfg12345 https://urizen.s.uw.edu/service_registry/Client/
    - response: [
                 {"id":1,"entity_id":"csr_client1","title":"Demo client 1"},
                 {"id":2,"entity_id":"csr_client2","title":"Second demo client"}
                ]
  - OpenAPI specification of the C/S Registry and Token services

  Marlena: OAuth2 terminology
_____________________
h6. 2017-02-16 10:35

Rob's Feb 1 recording https://internet2.app.box.com/s/264zhv777q59swclmefwbg6d1fqgbtry

from S Ac Res
to   S AcRes Cond
but why not leverage the Grouper-provided 'condition' clause support

In Duke model, API subjects/principals are typically end users.

but sometimes service is more efficient, less stateSpaceExplosion

Kong: allows (S | App) Ac Res Cond; Kong does with OAuth tokens;

Duke model: more work on part of API design to do the translation; has to have it's own model of what the resource is, or agreement between API and PDP on naming conventions.

kong OAuth token scopes determine what endpoints are accessible;
In Duke model, the calling app is the PEP, can ignore PDP; In Kong, it acts as PEP as well as PEP

how tied do we want to be to something like Kong (mrg)
~ how much functionality do you want to aggregate to make it easier for API developers? The API Mgr
MRG: Architect to have some abstraction across API managers; Gabor: say APIs are OAuth2,
KH: We'll have to decide whether we rely or don't rely on some kind of API mgr
GE: API mgr isn't sufficient to do the full PDP; it can do basics w low-risk endpoints, but realistically, the APIs behind will have to implement the AuthZ logic since by def. that logic is app specific.

does a desire for tech-independent standards for all this mean we are creeping toward the need for a XACML-lite policy expression language? What else would it be?
 - look to Clemson adaptive object framework; - look for XACML-lite options
 - graphDb as the natural data model for the policy domain;
 - 1st order Pred Logic approach: Assert a predicate that says policy => true(allow); result of assertion will be T (allow) or F (deny)
 - WC: asks similar question: what's the schema for these policy expressions?
 - rules engines' rule syntax

RobC: IAM space: didn't want a manager in front, because there's a pretty small set of front ends, but Health System has 100s of callers invoking the APIs;  Where does TIER fall? If we have 8-10 APIs, maybe we could get by without the API mgr; But API mgr does simplify the Sec. office job;

MRG: who's the audience? where are they at present?

WC: API with GET, can the person getting resource see the SSN attribute? We need to address or we leave our adopters in the lurch.

what grant types with OAuth2? Shilen has been doing this.
OIDC? Duke was doing their OAuth work before OIDC was a thing. However, Kong requires some JWT things that are very OIDC-y; Kong special sauce: encrypted JWTs with introspection support.
Kong cost: 1 person 1 month to get it up and limping along, learning Docker, too.
 - MitreID OAuth server:  Shilen: 10% of couple weeks to get it up
 - Open Source version of kong
 - Could Kong support OIDC plugin? Shilen could answer;

OIDC vis-a-vis OAuth: RobC from 60k level: OIDC is what happens when you take Std. OAuth and twist it to pass identity rather than permissions; Alternative: OIDC is a profile of JWT; OIDC relies heavily on introspection methods in OAuth to pull out attr. assertions

] Good source of documentation? materials are not federated. We can prolly get some screen shots pulled together.

_____________________
h6. 2017-01-04 11:24  references and links

https://www.javacodegeeks.com/2018/03/build-authentication-easy-way-spring-security-5-0-oidc.html
http://ma.axiomatics.com/acton/rif/10529/s-0348-1709/-/l-115a6:e22/q-133b9/showPreparedMessage?utm_term=Click%20here%2526nbsp%3B&utm_campaign=utm_source%3DNL%2526utm_medium%3Demail%2526utm_campaign%3DNLSept17&utm_content=email&utm_source=Act-On+Software&utm_medium=email&cm_mmc=Act-On%20Software-_-email-_-Keith,%20here%27s%20the%20latest%20in%20dynamic%20authorization%20-_-Click%20here%2526nbsp%3B&sid=TV2:T3BiiwuUr

http://www.baeldung.com/rest-api-spring-oauth2-angularjs
https://www.gluu.org/blog/webviews-are-bad-use-appauth/  <== secure
https://dzone.com/articles/secure-rest-services-and-web-applications-with-spr

Here's where we're at, right?

start from baseline of what kinds of apis are in scope;
- Grouper
- in/out EntReg
- provisioning

Guidelines, cookbook for specific tools

AuthN issue:
- human actor
- app/service actor; no ability to do some of what people can do.

Prejudice on answer: validating,

- how granular?
- do we anticipate having a platform for APIs to integrate with?
- we don't want to build an API manager
- make sense to define an API for API implementations to do AuthZ and AuthN
  - stock code in each web service; kerb authn of services; std model for AuthZ for ind. resources within the API
    - Resource does an AuthN check, then do AuthZ (lightweight)
  - shim that does AuthZ just goes out to Grouper. Mary has team working on 'Group Manager'. Overlay on Grouper for user presentation. Trust marking for approved/authoritative groups; long-range arc is for that tool to manage permissions (app owner can go in & manage permissions and resources. Hope is that over time we'll start to see app devs outsource PDPs to Group Manager. Group Mgr will be one more layer of abstraction. If the outcome on TIER authNZ were a collection of API requirements for an API that APIs could use to do AuthZ.

authNZ for data access concept easy, implementation is hard. There will be two camps; RESTafarians (inappropriate slicing of resources, granular authZ, you break caching which is seminal to REST being useful); other: resources are member of collection; lower level resource, then higher level must obey; Maybe API mgr applies data access rules?
___________________________________

Kong as API manager for Duke Health Sci.  Getkong.org
